{% extends 'base.html.twig' %} 



 {%  block content %}

 <style>
.audio-player audio::-webkit-media-controls-panel {
    background-color: #e9ecef; /* fond clair */
    border-radius: 5px;
    height: 35px;
}

.audio-player audio::-webkit-media-controls-play-button,
.audio-player audio::-webkit-media-controls-volume-slider {
    filter: invert(35%) sepia(5%) saturate(500%) hue-rotate(200deg);
}

.audio-wrapper:hover {
    border-color: #40E00B; /* vert */
}


 </style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@15/dist/nouislider.min.css">
<script src="https://cdn.jsdelivr.net/npm/nouislider@15/dist/nouislider.min.js"></script>

 <div class="container-xxl flex-grow-1 container-p-y">
 

<h5> <a href="{{ path('app_fichiers') }}">Dossier  </a> > {{ dossier.nom }}</h5>
 <div class="mb-3 d-flex flex-column flex-md-row align-items-start gap-2">
  <div class="d-flex flex-column">
    <label for="date-filter" class="form-label">Filtrer par date :</label>
    <input type="date" id="date-filter" class="form-control w-100 w-md-auto">
  </div>

  <!-- Boutons -->
  {# <div class="d-flex gap-2 mt-2 mt-md-4">
    <button type="button" class="btn btn-success " data-bs-toggle="modal" data-bs-target="#uploadModal">
  Ajouter fichier(s)
 </button> #}

<div class="d-flex gap-2 mt-2 mt-md-4 flex-wrap">
    <button id="showDrop" type="button" class="btn btn-success btn-sm btn-md">Ajouter fichier(s)</button>
    <button class="btn btn-danger btn-sm btn-md" id="deleteSelectedBtn" disabled>
        Supprimer s√©lection 
        <span id="selectedCount" class="badge badge-center rounded-pill bg-primary">0</span>
    </button>
</div>

 
</div>





<div class="row row-cols-1 row-cols-md-4 g-3 mb-5" id="fichier-grid">

 {# <div id="drop" style="display:none; border:2px dashed #bbb; padding:30px; text-align:center; margin-top:20px;">
        D√©posez vos fichiers ici ou cliquez pour s√©lectionner.
    </div>
    <div id="list" style="margin-top:20px;"></div> #}



{# Modal Bootstrap Pour upload de gros fichier avec Resumable.js #}
<div class="modal fade" id="uploadModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content rounded-3 shadow-lg">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" style="color: white;">Uploader fichier</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="drop" 
             style="border:2px dashed #bbb; border-radius:10px; padding:40px; text-align:center; cursor:pointer;">
          üìÇ D√©posez vos fichiers ici ou cliquez pour s√©lectionner.
        </div>

        <div id="list" class="mt-4"></div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
      </div>
    </div>
  </div>
</div>


    
<!-- La fen√™tre modale Bootstrap  pour ajouter fichier-->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="uploadModalLabel">Uploader fichiers dans "{{ dossier.nom }}"</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      <div class="modal-body">
      
        {{ form_start(form, {'attr': {'enctype': 'multipart/form-data'}}) }}


        <div class="mb-3">
          <label for="formFile" class="form-label">Fichier</label>
        {{ form_widget(form.fichier, {'attr': {'class': 'form-control', 'multiple': 'multiple'}}) }}
            {{ form_errors(form.fichier) }}
        </div>
        {{ form_widget(form.dossier, {'attr': {'type': 'hidden', 'style': 'display:none;'}}) }}

          <input type="hidden" name="dossier_id" value="{{ dossier.id }}">
          <button type="submit" class="btn btn-primary mt-3">Envoyer</button>
        {{ form_end(form) }}
      </div>
    </div>
  </div>
</div>

 {% for fichier in fichiers %}
    {% set ext = fichier.chemin|split('.')|last|lower %}
    {% set isImage = ext in ['jpg', 'jpeg', 'png', 'gif', 'webp'] %}
    {% set isVideo = ext in ['mp4', 'webm', 'ogg', 'mov', 'avi'] %}
    {% set isAudio = ext in ['mp3', 'wav', 'ogg'] %}
    {% set dateUpload = fichier.uploadedAt ? fichier.uploadedAt|date('Y-m-d') : '' %}
        {% set isFile = ext in ['docx', 'rtf', 'pdf', 'txt'] %}

    <div class="col fichier-card" data-date="{{ dateUpload }}">
    
      <div class="card h-100 shadow-sm ">
       <!-- Checkbox de s√©lection  jai retirer p-2 en haut  <div class="card h-100 shadow-sm p-2">-->
       
  <input type="checkbox" class="form-check-input file-checkbox position-absolute" style="top: 8px; left: 8px; border-radius: 50%; hover:width: 2px;cursor: pointer; border: 2px solid #40E00B;" value="{{ fichier.id }}">
          {% if isImage %}
              <img class="card-img-top img-fluid" src="{{ path('app_serve_image', {'path': fichier.chemin}) }}" alt="{{ fichier.nom }}" style="max-height: 200px; object-fit: cover;">
          {% elseif isVideo %}
                      {% set mimeType = 
                  ext == 'mov' ? 'video/quicktime' :
                  ext == 'mp4' ? 'video/mp4' :
                  ext == 'webm' ? 'video/webm' :
                  ext == 'ogg' ? 'video/ogg' :
                  'application/octet-stream'  %}
              <video class="card-img-top" controls style="max-height:200px; object-fit:cover;">
                  <source src="{{ path('app_serve_file', {'path': fichier.chemin}) }}" type="{{ mimeType }}">
                  Ton navigateur ne supporte pas la vid√©o.
              </video>
          {% elseif isAudio %}
              <img class="card-img-top img-fluid p-4" src="{{ asset('assets/img/icons/musicLogo.png') }}" alt="Fichier" style="max-height: 280px; object-fit: contain;">
              <audio class="w-100" controls style="outline:none; vertical-align: middle; padding: 10px  ">
                <source src="{{ path('app_serve_file', {'path': fichier.chemin}) }}" type="audio/{{ ext }}">
                Votre navigateur ne supporte pas la lecture audio.
              </audio>
  
        {% else %}
        
            {# Ici on met une ic√¥ne g√©n√©rique pour les fichiers non images #}
            <img class="card-img-top img-fluid p-4" src="{{ asset('assets/img/icons/fichiertxt.png') }}" alt="Fichier" style="max-height: 200px; object-fit: contain;">
        {% endif %}
        <div class="card-body d-flex justify-content-between p-2">
          <h7 class="card-title small text-truncate" title="{{ fichier.nom }}">{{ fichier.nom }}</h7>
          <p class="card-text small text-muted ">üìÖ {{ dateUpload ? dateUpload|date('d/m/Y') : 'Inconnu' }}</p>
        </div>
        <div class="card-footer bg-white border-top-0 d-flex justify-content-between p-2">
        {# <a class="btn btn-sm btn-outline-primary" href="{{ path('app_serve_file', {'path': fichier.chemin}) }}"  target="_blank">Voir</a> #}
        <a  href="{{ path('app_fichier_dupliquer', {'path': fichier.chemin, 'id': dossier.id}) }}">
           <img src="{{ asset('assets/img/icons/copy.png') }}" alt="Dupliquer" style="max-height: 18px; object-fit: contain;  filter: invert(66%) sepia(62%) saturate(5397%) hue-rotate(5deg) brightness(97%) contrast(101%);">
        </a>
        <a class="btn btn-sm btn-outline-primary" href="javascript:void(0);" onclick="openOverlay('{{ path('app_serve_file', {'path': fichier.chemin}) }}')">Voir</a>


        <a class="btn btn-sm btn-outline-success" href="{{ path('app_serve_file', {'path': fichier.chemin}) }}" download="{{ fichier.nom }}">T√©l√©charger</a>
        {% if isFile %}
            <a class="btn btn-sm btn-outline-primary" href="{{ path('app_editeur_fichier', {id: fichier.id}) }}">
                ‚úèÔ∏è 
            </a>
        {% endif %}


          <!-- Bouton d√©clencheur -->
        <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal{{ fichier.id }}">
          üóë
        </button>
        
        </div>
      </div>
    </div>



    <!-- Modale de confirmation de suppresion -->
<div class="modal fade" id="confirmDeleteModal{{ fichier.id }}" tabindex="-1" aria-labelledby="confirmDeleteModalLabel{{ fichier.id }}" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      
      <div class="modal-header">
        <h5 class="modal-title" id="confirmDeleteModalLabel{{ fichier.id }}">Confirmer la suppression</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      
      <div class="modal-body">
        √ätes-vous s√ªr de vouloir supprimer le fichier <strong>{{ fichier.nom }}</strong> ?
      </div>
      
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        
        <form method="post" action="{{ path('app_fichier_supprimer', { id: fichier.id }) }}">
          <button type="submit" class="btn btn-danger">Supprimer</button>
        </form>
      </div>
      
    </div>
  </div>
</div>



{# modele de suppresion pouir la selection de plusieur fichiers #}
<div class="modal fade" id="confirmDeleteSelectedModal" tabindex="-1" aria-labelledby="confirmDeleteSelectedLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmDeleteSelectedLabel">Confirmer la suppression</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      <div class="modal-body">
        √ätes-vous s√ªr de vouloir supprimer <span id="modalSelectedCount"></span> fichier(s) ?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Supprimer</button>
      </div>
    </div>
  </div>
</div>




{% else %}
    <div class="col">
      <div class="alert alert-warning w-100">Aucun fichier trouv√©.</div>
    </div>

    
{% endfor %}

</div>

<a href="{{ path('app_fichiers') }}" class="btn btn-secondary">Retour √† la liste g√©n√©rale</a>
</div>

<!-- Overlay 
<div id="fileOverlay" style="display: none; position: fixed; z-index: 9999; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.7);">
  <div style="position: relative; width: 90%; height: 90%; margin: 5vh auto; background: white; border: 5px solid #40E00B; border-radius: 10px; overflow: hidden;">
  <button onclick="closeOverlay()" style="position: absolute; top: 10px; right: 10px; z-index: 10; " class="btn btn-success">Fermer</button>
    <iframe id="fileViewer" src="" style="width: 100%; height: 100%; border: none;"></iframe>
  </div>
</div>-->

<div id="fileOverlay" style="display: none; position: fixed; z-index: 9999; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.7);">
  <div style="position: relative; width: 90%; height: 90%; margin: 5vh auto; background: white; border: 5px solid #40E00B; border-radius: 10px; overflow: hidden;">
    <button onclick="closeOverlay()" style="position: absolute; top: 10px; right: 10px; z-index: 10;" class="btn btn-success">Fermer</button>
    
    <iframe id="fileViewer" src="" style="width: 100%; height: 100%; border: none; display: block;"></iframe>
    <img id="imageViewer" src="" alt="Image" style="max-width: 100%; max-height: 100%; object-fit: contain; display: none; position: absolute; top: 0; left: 0;"/>
  </div>
</div>




<script src="{{ asset('assets/vendor/libs/popper/popper.js') }}"></script>


{# <script>
  function openOverlay(fileUrl) {
    const overlay = document.getElementById('fileOverlay');
    const viewer = document.getElementById('fileViewer');
    viewer.src = fileUrl;
    overlay.style.display = 'block';
  }

  function closeOverlay() {
    const overlay = document.getElementById('fileOverlay');
    const viewer = document.getElementById('fileViewer');
    viewer.src = '';
    overlay.style.display = 'none';
  }
</script> #}
{# <script>
  // D√©finir une constante pour l'ID du dossier (prot√©g√© contre le HTML injection)
  const DOSSIER_ID = {{ dossier.id|json_encode|raw }};

  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.file-checkbox');
    const deleteBtn = document.getElementById('deleteSelectedBtn');
    const countBadge = document.getElementById('selectedCount');

    // Met √† jour le badge et active/d√©sactive le bouton de suppression
    function updateSelectionState() {
      const selected = Array.from(checkboxes).filter(cb => cb.checked);
      const selectedCount = selected.length;

      countBadge.textContent = selectedCount;
      deleteBtn.disabled = selectedCount === 0;
    }

    // Ajouter un √©couteur √† chaque case √† cocher
    checkboxes.forEach(cb => {
      cb.addEventListener('change', updateSelectionState);
    });

    // G√©rer la suppression lors du clic
    deleteBtn.addEventListener('click', () => {
      const selectedIds = Array.from(checkboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.value);

      if (selectedIds.length === 0) return;

       //if (!confirm(`Supprimer ${selectedIds.length} fichier(s) ?`)) return; 

      fetch('{{ path('app_fichiers_supprimer_selection') }}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-TOKEN': '{{ csrf_token('supprimer_fichiers') }}'
        },
        body: JSON.stringify({
          dossierId: DOSSIER_ID,
          ids: selectedIds
        })
      })
      .then(response => {
        if (response.ok) {
          location.reload();
        } else {
          alert("Erreur lors de la suppression.");
        }
      })
      .catch(error => {
        console.error("Erreur r√©seau :", error);
        alert("Une erreur r√©seau est survenue.");
      });
    });
  });
</script> #}
{# 
<script>
function openOverlay(fileUrl) {
  const overlay = document.getElementById('fileOverlay');
  const viewer = document.getElementById('fileViewer');
  viewer.src = fileUrl;
  overlay.style.display = 'block';
}

function closeOverlay() {
  const overlay = document.getElementById('fileOverlay');
  const viewer = document.getElementById('fileViewer');
  viewer.src = '';
  overlay.style.display = 'none';
}

// D√©finir une constante pour l'ID du dossier (prot√©g√© contre le HTML injection)
const DOSSIER_ID = {{ dossier.id|json_encode|raw }};

document.addEventListener('DOMContentLoaded', () => {
  const checkboxes = document.querySelectorAll('.file-checkbox');
  const deleteBtn = document.getElementById('deleteSelectedBtn');
  const countBadge = document.getElementById('selectedCount');

  // Met √† jour le badge et active/d√©sactive le bouton de suppression
  function updateSelectionState() {
    const selected = Array.from(checkboxes).filter(cb => cb.checked);
    const selectedCount = selected.length;

    countBadge.textContent = selectedCount;
    deleteBtn.disabled = selectedCount === 0;
  }

  // Ajouter un √©couteur √† chaque case √† cocher
  checkboxes.forEach(cb => {
    cb.addEventListener('change', updateSelectionState);
  });

  // G√©rer la suppression lors du clic
  deleteBtn.addEventListener('click', () => {
    const selectedIds = Array.from(checkboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);

    if (selectedIds.length === 0) return;

    // Afficher le popup SweetAlert2
    Swal.fire({
      title: 'Confirmer la suppression',
      text: `Voulez-vous vraiment supprimer ${selectedIds.length} fichier(s) ?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Oui, supprimer',
      cancelButtonText: 'Annuler'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('{{ path('app_fichiers_supprimer_selection') }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-TOKEN': '{{ csrf_token('supprimer_fichiers') }}'
          },
          body: JSON.stringify({
            dossierId: DOSSIER_ID,
            ids: selectedIds
          })
        })
        .then(response => {
          if (response.ok) {
            Swal.fire(
              'Supprim√© !',
              'Les fichiers ont √©t√© supprim√©s avec succ√®s.',
              'success'
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire(
              'Erreur',
              'Une erreur est survenue lors de la suppression.',
              'error'
            );
          }
        })
        .catch(error => {
          console.error("Erreur r√©seau :", error);
          Swal.fire(
            'Erreur',
            'Une erreur r√©seau est survenue.',
            'error'
          );
        });
      }
    });
  });
});


</script> #}


<script>
function openOverlay(fileUrl) {
  const overlay = document.getElementById('fileOverlay');
  const viewer = document.getElementById('fileViewer');
  const imageViewer = document.getElementById('imageViewer');

  if (/\.(jpg|jpeg|png|gif|webp)$/i.test(fileUrl)) {
    // Affiche l'image directement, cache l'iframe
    viewer.style.display = 'none';
    imageViewer.style.display = 'block';
    imageViewer.src = fileUrl;
  } else {
    // Affiche l'iframe, cache l'image
    imageViewer.style.display = 'none';
    viewer.style.display = 'block';
    viewer.src = fileUrl;
  }

  overlay.style.display = 'block';
}




function closeOverlay() {
  const overlay = document.getElementById('fileOverlay');
  const viewer = document.getElementById('fileViewer');
  viewer.src = '';
  overlay.style.display = 'none';
}

// D√©finir une constante pour l'ID du dossier (prot√©g√© contre le HTML injection)
const DOSSIER_ID = {{ dossier.id|json_encode|raw }};

document.addEventListener('DOMContentLoaded', () => {
  const checkboxes = document.querySelectorAll('.file-checkbox');
  const deleteBtn = document.getElementById('deleteSelectedBtn');
  const countBadge = document.getElementById('selectedCount');

  // Met √† jour le badge et active/d√©sactive le bouton de suppression
  function updateSelectionState() {
    const selected = Array.from(checkboxes).filter(cb => cb.checked);
    const selectedCount = selected.length;

    countBadge.textContent = selectedCount;
    deleteBtn.disabled = selectedCount === 0;
  }

  // Ajouter un √©couteur √† chaque case √† cocher
  checkboxes.forEach(cb => {
    cb.addEventListener('change', updateSelectionState);
  });

  // G√©rer la suppression lors du clic
  deleteBtn.addEventListener('click', () => {
    const selectedIds = Array.from(checkboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);

    if (selectedIds.length === 0) return;

    // Afficher le popup SweetAlert2 avec un slider
    Swal.fire({
      title: 'Confirmer la suppression',
      html: `
        <p>Voulez-vous vraiment supprimer ${selectedIds.length} fichier(s) ?</p>
        <p>Faites glisser pour confirmer :</p>
        <div id="slider-confirm" style="width: 80%; margin: 20px auto;"></div>
        <p id="slider-status" style="text-align: center; color: #888;">Glissez vers la droite pour confirmer</p>
      `,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Confirmer',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      didOpen: () => {
        // Initialiser le slider noUiSlider
        const slider = document.getElementById('slider-confirm');
        const sliderStatus = document.getElementById('slider-status');
        const confirmButton = Swal.getConfirmButton();

        // D√©sactiver le bouton de confirmation par d√©faut
        confirmButton.disabled = true;

        noUiSlider.create(slider, {
          start: 0,
          range: {
            'min': 0,
            'max': 100
          },
          step: 1
        });

        // √âcouter les changements du slider
        slider.noUiSlider.on('update', (values, handle) => {
          const value = parseFloat(values[handle]);
          if (value >= 100) {
            sliderStatus.textContent = 'Confirmation pr√™te !';
            sliderStatus.style.color = '#28a745';
            confirmButton.disabled = false;
          } else {
            sliderStatus.textContent = 'Glissez vers la droite pour confirmer';
            sliderStatus.style.color = '#888';
            confirmButton.disabled = true;
          }
        });
      },
      preConfirm: () => {
        const slider = document.getElementById('slider-confirm');
        return slider.noUiSlider.get() >= 100; // V√©rifie que le slider est √† 100%
      }
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('{{ path('app_fichiers_supprimer_selection') }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-TOKEN': '{{ csrf_token('supprimer_fichiers') }}'
          },
          body: JSON.stringify({
            dossierId: DOSSIER_ID,
            ids: selectedIds
          })
        })
        .then(response => {
          if (response.ok) {
            Swal.fire(
              'Supprim√© !',
              'Les fichiers ont √©t√© supprim√©s avec succ√®s.',
              'success'
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire(
              'Erreur',
              'Une erreur est survenue lors de la suppression.',
              'error'
            );
          }
        })
        .catch(error => {
          console.error("Erreur r√©seau :", error);
          Swal.fire(
            'Erreur',
            'Une erreur r√©seau est survenue.',
            'error'
          );
        });
      }
    });
  });
});
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




{# ---------------- partie avec Biblioth√®que Resumable.js ------------ #}




<script src="https://unpkg.com/resumablejs@1.1.0/resumable.js"></script>
<script>
{# document.getElementById('showDrop').addEventListener('click', function() {
    document.getElementById('drop').style.display = 'block';
}); #}

document.getElementById('showDrop').addEventListener('click', function() {
    var modal = new bootstrap.Modal(document.getElementById('uploadModal'));
    modal.show();
});

var r = new Resumable({
    target: "{{ path('app_dossier_afficher', {'id': dossier.id}) }}",
    query: {},
    chunkSize: 2*1024*1024, // 2MB
     fileParameterName: 'file', // tr√®s important !!
    simultaneousUploads: 1,
    testChunks: true,
    throttleProgressCallbacks: 1,
});


r.assignDrop(document.getElementById('drop'));
r.assignBrowse(document.getElementById('drop'));

r.on('fileAdded', function(file) {
    var list = document.getElementById('list');
    var item = document.createElement('div');
    item.id = 'file-' + file.uniqueIdentifier;

    item.innerHTML = `
        <strong>${file.fileName}</strong>
        <div style="background:#eee; height:20px; width:100%; margin-top:5px; border-radius:4px; overflow:hidden;">
            <div class="progress" 
                 style="background:linear-gradient(90deg, #28a745, #218838); 
                        width:0%; 
                        height:100%; 
                        transition: width 0.5s ease;">
            </div>
        </div>
    `;

    list.appendChild(item);
    r.upload();
});

r.on('fileProgress', function(file){
    var progress = Math.floor(file.progress() * 100) + '%';
    var bar = document.querySelector('#file-' + file.uniqueIdentifier + ' .progress');
    if (bar) bar.style.width = progress;
});



r.on('fileSuccess', function(file, message){
    var list = document.getElementById('list');
    var item = document.createElement('div');
    item.innerText = "Upload termin√©: " + file.fileName;
    list.appendChild(item);

    // V√©rifier si tous les fichiers sont termin√©s
    if (r.files.every(f => f.isComplete())) {
        setTimeout(() => {
            location.reload(); // Rafra√Æchit la page
        }, 3000); // petit d√©lai pour laisser afficher "‚úîÔ∏è Termin√©"
    }
});


</script>









{% endblock %}
